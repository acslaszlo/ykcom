[project]
name = "ykcom"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "László Ács", email = "acs.laci@gmail.com" }
]
requires-python = ">=3.13"
dependencies = []

[dependency-groups]
dev = [
    "mypy>=1.15.0",
    "pytest>=8.3.5",
    "ruff>=0.11.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # mccabe
    "COM",  # flake8-commas
    # "D",    # pydocstyle
    "DTZ",  # flake8-datetimez
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "E",    # pycodestyle
    "EM",   # flake8-errmsg
    "F",    # Pyflakes
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FURB", # refurb
    "N",    # pep8-naming
    "PERF", # Perflint
    "PIE",  # flake8-pie
    "PL",   # Pylint
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "TC",   # flake8-type-checking
    "UP",   # pyupgrade
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    # "D100",  # Missing docstring in public module
    # "D102",  # Missing docstring in public method
    "S101",  # Use of `assert` detected
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
strict = true

[tool.tox]
requires = ["tox"]
env_list = ["3.13", "lint", "check_format", "mypy", "fixy"]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
commands = [
    ["pytest", "tests", { replace = "posargs", extend = true }],
]

[tool.tox.env.lint]
runner = "uv-venv-runner"
deps = [
    "ruff",
]
commands = [
    ["ruff", "check"],
]

[tool.tox.env.check_format]
runner = "uv-venv-runner"
deps = [
    "ruff",
]
commands = [
    ["ruff", "format", "--check"],
]

[tool.tox.env.mypy]
runner = "uv-venv-runner"
deps = [
    "mypy",
]
commands = [
    ["mypy", "src"],
]

[tool.tox.env.fixy]
runner = "uv-venv-runner"
deps = [
    "ruff",
]
commands = [
    ["ruff", "format"],
    ["ruff", "check", "--fix"],
]
